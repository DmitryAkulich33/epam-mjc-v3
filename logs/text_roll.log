2023-02-05 13:11:00 DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Found key 'spring.liveBeansView.mbeanDomain' in PropertySource 'systemProperties' with value of type String
2023-02-05 13:11:00 INFO  com.epam.Application - Started Application in 5.905 seconds (JVM running for 8.122)
2023-02-05 13:11:02 DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Found key 'local.server.port' in PropertySource 'server.ports' with value of type Integer
2023-02-05 13:11:03 INFO  core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-02-05 13:11:03 INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-02-05 13:11:03 DEBUG org.springframework.web.servlet.DispatcherServlet - Detected StandardServletMultipartResolver
2023-02-05 13:11:03 DEBUG org.springframework.web.servlet.DispatcherServlet - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2023-02-05 13:11:03 INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 9 ms
2023-02-05 13:11:03 DEBUG org.springframework.web.servlet.DispatcherServlet - GET "/api/v1/tags?pageNumber=1&pageSize=10", parameters={masked}
2023-02-05 13:11:03 DEBUG servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped to com.epam.controller.TagControllerImpl#getAllTags(Integer, Integer)
2023-02-05 13:11:03 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 13:11:03 DEBUG com.epam.aspect.Logging - Enter: com.epam.controller.TagControllerImpl.getAllTags() with argument[s] = [1, 10]
2023-02-05 13:11:03 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.TagServiceImpl.getAllTags() with argument[s] = [1, 10]
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(1678688180<open>)] for JPA transaction
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.count]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 13:11:03 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@429832932 wrapping org.postgresql.jdbc.PgConnection@486e9d1d] read-only
2023-02-05 13:11:03 DEBUG hibernate.engine.transaction.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-02-05 13:11:03 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@3fc20a47]
2023-02-05 13:11:03 DEBUG org.hibernate.hql.internal.QueryTranslatorFactoryInitiator - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@ad63b26
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select count(*) from com.epam.domain.Tag x
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  \-[IDENT] Node: 'epam'
       |     |  |  \-[IDENT] Node: 'domain'
       |     |  \-[IDENT] Node: 'Tag'
       |     \-[ALIAS] Node: 'x'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

2023-02-05 13:11:03 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 13:11:03 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.Tag (x) -> tag0_
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} tag tag0_ ) )
2023-02-05 13:11:03 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  +-CountNode
    |  |  \-SqlNode
    |  \-SqlNode
    \-FromClause
       \-FromElement

2023-02-05 13:11:03 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [tag tag0_]
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (tag)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[x], fromElementByTableAlias=[tag0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'tag tag0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=x,role=null,tableName=tag,tableAlias=tag0_,origin=null,columns={,className=com.epam.domain.Tag}}

2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select count(*) from com.epam.domain.Tag x
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select count(*) as col_0_0_ from tag tag0_
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:03 DEBUG org.hibernate.SQL - 
    select
        count(*) as col_0_0_ 
    from
        tag tag0_
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result row: 
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(1678688180<open>)]
2023-02-05 13:11:03 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 13:11:03 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@429832932 wrapping org.postgresql.jdbc.PgConnection@486e9d1d]
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(1678688180<open>)] for JPA transaction
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 13:11:03 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@429832932 wrapping org.postgresql.jdbc.PgConnection@486e9d1d] read-only
2023-02-05 13:11:03 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@464aa2ba]
2023-02-05 13:11:03 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select generatedAlias0 from com.epam.domain.Tag as generatedAlias0
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  \-[IDENT] Node: 'epam'
       |     |  |  \-[IDENT] Node: 'domain'
       |     |  \-[IDENT] Node: 'Tag'
       |     \-[ALIAS] Node: 'generatedAlias0'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'generatedAlias0'

2023-02-05 13:11:03 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 13:11:03 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.Tag (generatedAlias0) -> tag0_
2023-02-05 13:11:03 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> tag0_.id
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} tag0_.id ) ( FromClause{level=1} tag tag0_ ) )
2023-02-05 13:11:03 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Tag): [tag]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(com.epam.domain.Tag)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    \-FromClause
       \-FromElement

2023-02-05 13:11:03 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [tag tag0_]
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (tag)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'tag0_.id as id1_4_' {alias=generatedAlias0, className=com.epam.domain.Tag, tableAlias=tag0_}
    |  \-[SQL_TOKEN] SqlFragment: 'tag0_.name as name2_4_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[tag0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'tag tag0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=tag,tableAlias=tag0_,origin=null,columns={,className=com.epam.domain.Tag}}

2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select generatedAlias0 from com.epam.domain.Tag as generatedAlias0
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select tag0_.id as id1_4_, tag0_.name as name2_4_ from tag tag0_
2023-02-05 13:11:03 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:03 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ limit ?
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#1]
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result set row: 1
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#2]
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result set row: 2
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#3]
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result set row: 3
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#4]
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result set row: 4
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#6]
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result set row: 5
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#7]
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result set row: 6
2023-02-05 13:11:03 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#8]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#1]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = sport
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#1]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#2]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = weather
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#2]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#3]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = shop
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#3]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#4]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = culture
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#4]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#6]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test3
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#6]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#7]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test23
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#7]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#8]
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:03 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#8]
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(1678688180<open>)]
2023-02-05 13:11:03 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 13:11:03 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@429832932 wrapping org.postgresql.jdbc.PgConnection@486e9d1d]
2023-02-05 13:11:03 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 13:11:03 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=weather), Tag(name=shop), Tag(name=culture), Tag(name=test3), Tag(name=test23), Tag(name=test)]]
2023-02-05 13:11:03 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test)]
2023-02-05 13:11:03 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.TagServiceImpl.getAllTags() with result = [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test)]
2023-02-05 13:11:04 DEBUG com.epam.aspect.Logging - Exit: com.epam.controller.TagControllerImpl.getAllTags() with result = <200 OK OK,Resources { content: [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test)], links: [<http://localhost:8080/api/v1/tags?pageNumber=1&pageSize=10>;rel="self", <http://localhost:8080/api/v1/tags?pageNumber=2&pageSize=10>;rel="nextPage"] },[]>
2023-02-05 13:11:04 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json]
2023-02-05 13:11:04 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Writing [Resources { content: [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), (truncated)...]
2023-02-05 13:11:04 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 13:11:04 DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 200 OK
2023-02-05 13:11:12 DEBUG org.springframework.web.servlet.DispatcherServlet - GET "/api/v1/authors?pageNumber=1&pageSize=10", parameters={masked}
2023-02-05 13:11:12 DEBUG servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped to com.epam.controller.AuthorControllerImpl#getAllAuthors(Integer, Integer)
2023-02-05 13:11:12 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 13:11:12 DEBUG com.epam.aspect.Logging - Enter: com.epam.controller.AuthorControllerImpl.getAllAuthors() with argument[s] = [1, 10]
2023-02-05 13:11:12 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.AuthorServiceImpl.getAllAuthors() with argument[s] = [1, 10]
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(615737338<open>)] for JPA transaction
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.count]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 13:11:12 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@1806043684 wrapping org.postgresql.jdbc.PgConnection@486e9d1d] read-only
2023-02-05 13:11:12 DEBUG hibernate.engine.transaction.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-02-05 13:11:12 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@46c6b3a]
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select count(*) from com.epam.domain.Author x
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  \-[IDENT] Node: 'epam'
       |     |  |  \-[IDENT] Node: 'domain'
       |     |  \-[IDENT] Node: 'Author'
       |     \-[ALIAS] Node: 'x'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

2023-02-05 13:11:12 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 13:11:12 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.Author (x) -> author0_
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} author author0_ ) )
2023-02-05 13:11:12 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  +-CountNode
    |  |  \-SqlNode
    |  \-SqlNode
    \-FromClause
       \-FromElement

2023-02-05 13:11:12 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [author author0_]
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (author)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[x], fromElementByTableAlias=[author0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'author author0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=x,role=null,tableName=author,tableAlias=author0_,origin=null,columns={,className=com.epam.domain.Author}}

2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select count(*) from com.epam.domain.Author x
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select count(*) as col_0_0_ from author author0_
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:12 DEBUG org.hibernate.SQL - 
    select
        count(*) as col_0_0_ 
    from
        author author0_
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result row: 
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(615737338<open>)]
2023-02-05 13:11:12 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 13:11:12 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@1806043684 wrapping org.postgresql.jdbc.PgConnection@486e9d1d]
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(615737338<open>)] for JPA transaction
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 13:11:12 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@1806043684 wrapping org.postgresql.jdbc.PgConnection@486e9d1d] read-only
2023-02-05 13:11:12 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@19ffa925]
2023-02-05 13:11:12 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from author as generatedAlias0
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select generatedAlias0 from com.epam.domain.Author as generatedAlias0
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  \-[IDENT] Node: 'epam'
       |     |  |  \-[IDENT] Node: 'domain'
       |     |  \-[IDENT] Node: 'Author'
       |     \-[ALIAS] Node: 'generatedAlias0'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'generatedAlias0'

2023-02-05 13:11:12 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 13:11:12 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.Author (generatedAlias0) -> author0_
2023-02-05 13:11:12 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> author0_.id
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} author0_.id ) ( FromClause{level=1} author author0_ ) )
2023-02-05 13:11:12 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Author): [author]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(com.epam.domain.Author)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    \-FromClause
       \-FromElement

2023-02-05 13:11:12 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [author author0_]
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (author)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'author0_.id as id1_0_' {alias=generatedAlias0, className=com.epam.domain.Author, tableAlias=author0_}
    |  \-[SQL_TOKEN] SqlFragment: 'author0_.name as name2_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[author0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'author author0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=author,tableAlias=author0_,origin=null,columns={,className=com.epam.domain.Author}}

2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select generatedAlias0 from com.epam.domain.Author as generatedAlias0
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select author0_.id as id1_0_, author0_.name as name2_0_ from author author0_
2023-02-05 13:11:12 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 13:11:12 DEBUG org.hibernate.SQL - 
    select
        author0_.id as id1_0_,
        author0_.name as name2_0_ 
    from
        author author0_ limit ?
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Author#1]
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result set row: 1
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Author#2]
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result set row: 2
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Author#3]
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result set row: 3
2023-02-05 13:11:12 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Author#4]
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#1]
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = Jim
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#1]
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#2]
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = John
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#2]
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#3]
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = David
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#3]
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#4]
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = Daniel
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 13:11:12 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#4]
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(615737338<open>)]
2023-02-05 13:11:12 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 13:11:12 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@1806043684 wrapping org.postgresql.jdbc.PgConnection@486e9d1d]
2023-02-05 13:11:12 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 13:11:12 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDtoList() with argument[s] = [[Author(name=Jim), Author(name=John), Author(name=David), Author(name=Daniel)]]
2023-02-05 13:11:12 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDtoList() with result = [AuthorDto(id=1, name=Jim), AuthorDto(id=2, name=John), AuthorDto(id=3, name=David), AuthorDto(id=4, name=Daniel)]
2023-02-05 13:11:12 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.AuthorServiceImpl.getAllAuthors() with result = [AuthorDto(id=1, name=Jim), AuthorDto(id=2, name=John), AuthorDto(id=3, name=David), AuthorDto(id=4, name=Daniel)]
2023-02-05 13:11:12 DEBUG com.epam.aspect.Logging - Exit: com.epam.controller.AuthorControllerImpl.getAllAuthors() with result = <200 OK OK,Resources { content: [AuthorDto(id=1, name=Jim), AuthorDto(id=2, name=John), AuthorDto(id=3, name=David), AuthorDto(id=4, name=Daniel)], links: [<http://localhost:8080/api/v1/authors?pageNumber=1&pageSize=10>;rel="self", <http://localhost:8080/api/v1/authors?pageNumber=2&pageSize=10>;rel="nextPage"] },[]>
2023-02-05 13:11:12 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json]
2023-02-05 13:11:12 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Writing [Resources { content: [AuthorDto(id=1, name=Jim), AuthorDto(id=2, name=John), AuthorDto(id=3, name=Da (truncated)...]
2023-02-05 13:11:12 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 13:11:12 DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 200 OK
