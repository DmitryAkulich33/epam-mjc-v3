2023-02-05 19:32:26 DEBUG boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver - Found key 'spring.liveBeansView.mbeanDomain' in PropertySource 'systemProperties' with value of type String
2023-02-05 19:32:26 INFO  com.epam.Application - Started Application in 6.786 seconds (JVM running for 8.739)
2023-02-05 19:32:26 DEBUG org.springframework.boot.availability.ApplicationAvailabilityBean - Application availability state LivenessState changed to CORRECT
2023-02-05 19:32:26 DEBUG org.springframework.boot.availability.ApplicationAvailabilityBean - Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
2023-02-05 19:32:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:32:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:32:57 INFO  core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-02-05 19:32:57 INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-02-05 19:32:57 DEBUG org.springframework.web.servlet.DispatcherServlet - Detected StandardServletMultipartResolver
2023-02-05 19:32:57 DEBUG org.springframework.web.servlet.DispatcherServlet - Detected AcceptHeaderLocaleResolver
2023-02-05 19:32:57 DEBUG org.springframework.web.servlet.DispatcherServlet - Detected FixedThemeResolver
2023-02-05 19:32:57 DEBUG org.springframework.web.servlet.DispatcherServlet - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@5d08a65c
2023-02-05 19:32:57 DEBUG org.springframework.web.servlet.DispatcherServlet - Detected org.springframework.web.servlet.support.SessionFlashMapManager@70044113
2023-02-05 19:32:57 DEBUG org.springframework.web.servlet.DispatcherServlet - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2023-02-05 19:32:57 INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2023-02-05 19:32:57 DEBUG org.springframework.web.servlet.DispatcherServlet - GET "/api/v1/tags?pageNumber=1&pageSize=10", parameters={masked}
2023-02-05 19:32:57 DEBUG servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped to com.epam.controller.TagControllerImpl#getAllTags(Integer, Integer)
2023-02-05 19:32:57 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:32:57 DEBUG com.epam.aspect.Logging - Enter: com.epam.controller.TagControllerImpl.getAllTags() with argument[s] = [1, 10]
2023-02-05 19:32:57 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.TagServiceImpl.getAllTags() with argument[s] = [1, 10]
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(227980571<open>)] for JPA transaction
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.count]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 19:32:57 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@1019261159 wrapping org.postgresql.jdbc.PgConnection@743d0d44] read-only
2023-02-05 19:32:57 DEBUG hibernate.engine.transaction.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-02-05 19:32:57 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@6ec27bc1]
2023-02-05 19:32:57 DEBUG org.hibernate.hql.internal.QueryTranslatorFactoryInitiator - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@40d1d408
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select count(*) from com.epam.domain.Tag x
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  \-[IDENT] Node: 'epam'
       |     |  |  \-[IDENT] Node: 'domain'
       |     |  \-[IDENT] Node: 'Tag'
       |     \-[ALIAS] Node: 'x'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

2023-02-05 19:32:57 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 19:32:57 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.Tag (x) -> tag0_
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} tag tag0_ ) )
2023-02-05 19:32:57 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  +-CountNode
    |  |  \-SqlNode
    |  \-SqlNode
    \-FromClause
       \-FromElement

2023-02-05 19:32:57 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [tag tag0_]
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (tag)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[x], fromElementByTableAlias=[tag0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'tag tag0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=x,role=null,tableName=tag,tableAlias=tag0_,origin=null,columns={,className=com.epam.domain.Tag}}

2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select count(*) from com.epam.domain.Tag x
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select count(*) as col_0_0_ from tag tag0_
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:32:57 DEBUG org.hibernate.SQL - 
    select
        count(*) as col_0_0_ 
    from
        tag tag0_
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: 
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(227980571<open>)]
2023-02-05 19:32:57 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 19:32:57 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@1019261159 wrapping org.postgresql.jdbc.PgConnection@743d0d44]
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(227980571<open>)] for JPA transaction
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 19:32:57 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@1019261159 wrapping org.postgresql.jdbc.PgConnection@743d0d44] read-only
2023-02-05 19:32:57 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@5b59f20c]
2023-02-05 19:32:57 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select generatedAlias0 from com.epam.domain.Tag as generatedAlias0
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  \-[IDENT] Node: 'epam'
       |     |  |  \-[IDENT] Node: 'domain'
       |     |  \-[IDENT] Node: 'Tag'
       |     \-[ALIAS] Node: 'generatedAlias0'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'generatedAlias0'

2023-02-05 19:32:57 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 19:32:57 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.Tag (generatedAlias0) -> tag0_
2023-02-05 19:32:57 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> tag0_.id
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} tag0_.id ) ( FromClause{level=1} tag tag0_ ) )
2023-02-05 19:32:57 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Tag): [tag]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(com.epam.domain.Tag)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    \-FromClause
       \-FromElement

2023-02-05 19:32:57 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [tag tag0_]
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (tag)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'tag0_.id as id1_4_' {alias=generatedAlias0, className=com.epam.domain.Tag, tableAlias=tag0_}
    |  \-[SQL_TOKEN] SqlFragment: 'tag0_.name as name2_4_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[tag0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'tag tag0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=tag,tableAlias=tag0_,origin=null,columns={,className=com.epam.domain.Tag}}

2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select generatedAlias0 from com.epam.domain.Tag as generatedAlias0
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select tag0_.id as id1_4_, tag0_.name as name2_4_ from tag tag0_
2023-02-05 19:32:57 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:32:57 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ limit ?
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#1]
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 1
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#2]
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 2
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#3]
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 3
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#4]
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 4
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#6]
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 5
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#7]
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 6
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#8]
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result set row: 7
2023-02-05 19:32:57 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#9]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#1]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = sport
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#1]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#2]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = weather
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#2]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#3]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = shop
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#3]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#4]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = culture
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#4]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#6]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test3
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#6]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#7]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test23
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#7]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#8]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#8]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#9]
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test8888
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:32:57 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#9]
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(227980571<open>)]
2023-02-05 19:32:57 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 19:32:57 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@1019261159 wrapping org.postgresql.jdbc.PgConnection@743d0d44]
2023-02-05 19:32:57 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 19:32:57 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=weather), Tag(name=shop), Tag(name=culture), Tag(name=test3), Tag(name=test23), Tag(name=test), Tag(name=test8888)]]
2023-02-05 19:32:57 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test), TagDto(id=9, name=test8888)]
2023-02-05 19:32:57 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.TagServiceImpl.getAllTags() with result = [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test), TagDto(id=9, name=test8888)]
2023-02-05 19:32:57 DEBUG com.epam.aspect.Logging - Exit: com.epam.controller.TagControllerImpl.getAllTags() with result = <200 OK OK,CollectionModel { content: [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test), TagDto(id=9, name=test8888)], fallbackType: null, links: [<http://localhost:8080/api/v1/tags?pageNumber=1&pageSize=10>;rel="self", <http://localhost:8080/api/v1/tags?pageNumber=2&pageSize=10>;rel="nextPage"] },[]>
2023-02-05 19:32:57 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json]
2023-02-05 19:32:57 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Writing [CollectionModel { content: [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name= (truncated)...]
2023-02-05 19:32:57 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:32:57 DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 200 OK
2023-02-05 19:33:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:33:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:33:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:33:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:34:06 DEBUG org.springframework.web.servlet.DispatcherServlet - GET "/api/v1/tags?pageNumber=1&pageSize=10", parameters={masked}
2023-02-05 19:34:06 DEBUG servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped to com.epam.controller.TagControllerImpl#getAllTags(Integer, Integer)
2023-02-05 19:34:06 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:34:06 DEBUG com.epam.aspect.Logging - Enter: com.epam.controller.TagControllerImpl.getAllTags() with argument[s] = [1, 10]
2023-02-05 19:34:06 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.TagServiceImpl.getAllTags() with argument[s] = [1, 10]
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(878001018<open>)] for JPA transaction
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.count]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 19:34:06 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@1901573012 wrapping org.postgresql.jdbc.PgConnection@743d0d44] read-only
2023-02-05 19:34:06 DEBUG hibernate.engine.transaction.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-02-05 19:34:06 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@25ae90b4]
2023-02-05 19:34:06 DEBUG org.hibernate.SQL - 
    select
        count(*) as col_0_0_ 
    from
        tag tag0_
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: 
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(878001018<open>)]
2023-02-05 19:34:06 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 19:34:06 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@1901573012 wrapping org.postgresql.jdbc.PgConnection@743d0d44]
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(878001018<open>)] for JPA transaction
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 19:34:06 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@1901573012 wrapping org.postgresql.jdbc.PgConnection@743d0d44] read-only
2023-02-05 19:34:06 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@11784cdb]
2023-02-05 19:34:06 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0
2023-02-05 19:34:06 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ limit ?
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#1]
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 1
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#2]
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 2
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#3]
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 3
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#4]
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 4
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#6]
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 5
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#7]
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 6
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#8]
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result set row: 7
2023-02-05 19:34:06 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#9]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#1]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = sport
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#1]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#2]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = weather
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#2]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#3]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = shop
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#3]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#4]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = culture
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#4]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#6]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test3
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#6]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#7]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test23
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#7]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#8]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#8]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#9]
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test8888
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:34:06 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#9]
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(878001018<open>)]
2023-02-05 19:34:06 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 19:34:06 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@1901573012 wrapping org.postgresql.jdbc.PgConnection@743d0d44]
2023-02-05 19:34:06 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 19:34:06 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=weather), Tag(name=shop), Tag(name=culture), Tag(name=test3), Tag(name=test23), Tag(name=test), Tag(name=test8888)]]
2023-02-05 19:34:06 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test), TagDto(id=9, name=test8888)]
2023-02-05 19:34:06 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.TagServiceImpl.getAllTags() with result = [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test), TagDto(id=9, name=test8888)]
2023-02-05 19:34:06 DEBUG com.epam.aspect.Logging - Exit: com.epam.controller.TagControllerImpl.getAllTags() with result = <200 OK OK,CollectionModel { content: [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name=shop), TagDto(id=4, name=culture), TagDto(id=6, name=test3), TagDto(id=7, name=test23), TagDto(id=8, name=test), TagDto(id=9, name=test8888)], fallbackType: null, links: [<http://localhost:8080/api/v1/tags?pageNumber=1&pageSize=10>;rel="self", <http://localhost:8080/api/v1/tags?pageNumber=2&pageSize=10>;rel="nextPage"] },[]>
2023-02-05 19:34:06 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json]
2023-02-05 19:34:06 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Writing [CollectionModel { content: [TagDto(id=1, name=sport), TagDto(id=2, name=weather), TagDto(id=3, name= (truncated)...]
2023-02-05 19:34:06 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:34:06 DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 200 OK
2023-02-05 19:34:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:34:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:34:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:34:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:35:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:35:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:35:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:35:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:36:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:36:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:36:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:36:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:37:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:37:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:37:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:37:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:38:01 DEBUG org.springframework.web.servlet.DispatcherServlet - GET "/api/v1/news?pageNumber=1&pageSize=10&sortType=DESC", parameters={masked}
2023-02-05 19:38:01 DEBUG servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped to com.epam.controller.NewsControllerImpl#getAllNews(Integer, Integer, String, String)
2023-02-05 19:38:01 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Enter: com.epam.controller.NewsControllerImpl.getAllNews() with argument[s] = [1, 10, DESC, created]
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.NewsServiceImpl.getAllNews() with argument[s] = [1, 10, DESC, created]
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(1307807793<open>)] for JPA transaction
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.count]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 19:38:01 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@2022306194 wrapping org.postgresql.jdbc.PgConnection@743d0d44] read-only
2023-02-05 19:38:01 DEBUG hibernate.engine.transaction.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-02-05 19:38:01 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@5ed09725]
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select count(*) from com.epam.domain.News x
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  \-[IDENT] Node: 'epam'
       |     |  |  \-[IDENT] Node: 'domain'
       |     |  \-[IDENT] Node: 'News'
       |     \-[ALIAS] Node: 'x'
       \-[SELECT] Node: 'select'
          \-[COUNT] Node: 'count'
             \-[ROW_STAR] Node: '*'

2023-02-05 19:38:01 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 19:38:01 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.News (x) -> news0_
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} news news0_ ) )
2023-02-05 19:38:01 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  +-CountNode
    |  |  \-SqlNode
    |  \-SqlNode
    \-FromClause
       \-FromElement

2023-02-05 19:38:01 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [news news0_]
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (news)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[x], fromElementByTableAlias=[news0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'news news0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=x,role=null,tableName=news,tableAlias=news0_,origin=null,columns={,className=com.epam.domain.News}}

2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select count(*) from com.epam.domain.News x
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select count(*) as col_0_0_ from news news0_
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        count(*) as col_0_0_ 
    from
        news news0_
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result row: 
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(1307807793<open>)]
2023-02-05 19:38:01 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 19:38:01 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@2022306194 wrapping org.postgresql.jdbc.PgConnection@743d0d44]
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(1307807793<open>)] for JPA transaction
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
2023-02-05 19:38:01 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Setting JDBC Connection [HikariProxyConnection@2022306194 wrapping org.postgresql.jdbc.PgConnection@743d0d44] read-only
2023-02-05 19:38:01 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@556b52cf]
2023-02-05 19:38:01 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from news as generatedAlias0 order by generatedAlias0.created desc
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select generatedAlias0 from com.epam.domain.News as generatedAlias0 order by generatedAlias0.created desc
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  \-[IDENT] Node: 'epam'
    |  |     |  |  \-[IDENT] Node: 'domain'
    |  |     |  \-[IDENT] Node: 'News'
    |  |     \-[ALIAS] Node: 'generatedAlias0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[ORDER] Node: 'order'
       +-[DOT] Node: '.'
       |  +-[IDENT] Node: 'generatedAlias0'
       |  \-[IDENT] Node: 'created'
       \-[DESCENDING] Node: 'desc'

2023-02-05 19:38:01 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 19:38:01 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.News (generatedAlias0) -> news0_
2023-02-05 19:38:01 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> news0_.id
2023-02-05 19:38:01 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> news0_.id
2023-02-05 19:38:01 DEBUG hql.internal.ast.tree.DotNode - getDataType() : created -> org.hibernate.type.LocalDateTimeType@7de3206d
2023-02-05 19:38:01 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0.created -> news0_.created
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} news0_.id ) ( FromClause{level=1} news news0_ ) ( order ( news0_.created news0_.id created ) desc ) )
2023-02-05 19:38:01 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity News): [news]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(com.epam.domain.News)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-OrderByClause
       +-DotNode
       | persister: SingleTableEntityPersister(com.epam.domain.News)
       | path: generatedAlias0.created
       |  +-IdentNode
       |  | persister: SingleTableEntityPersister(com.epam.domain.News)
       |  | originalText: generatedAlias0
       |  \-IdentNode
       |    persister: null
       |    originalText: created
       \-SqlNode

2023-02-05 19:38:01 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [news news0_]
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (news)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'news0_.id as id1_2_' {alias=generatedAlias0, className=com.epam.domain.News, tableAlias=news0_}
    |  \-[SQL_TOKEN] SqlFragment: 'news0_.author_id as author_i6_2_, news0_.content as content2_2_, news0_.created as created3_2_, news0_.modified as modified4_2_, news0_.title as title5_2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[news0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'news news0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=news,tableAlias=news0_,origin=null,columns={,className=com.epam.domain.News}}
    \-[ORDER] OrderByClause: 'order'
       +-[DOT] DotNode: 'news0_.created' {propertyName=created,dereferenceType=PRIMITIVE,getPropertyPath=created,path=generatedAlias0.created,tableAlias=news0_,className=com.epam.domain.News,classAlias=generatedAlias0}
       |  +-[ALIAS_REF] IdentNode: 'news0_.id' {alias=generatedAlias0, className=com.epam.domain.News, tableAlias=news0_}
       |  \-[IDENT] IdentNode: 'created' {originalText=created}
       \-[DESCENDING] SqlNode: 'desc'

2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select generatedAlias0 from com.epam.domain.News as generatedAlias0 order by generatedAlias0.created desc
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select news0_.id as id1_2_, news0_.author_id as author_i6_2_, news0_.content as content2_2_, news0_.created as created3_2_, news0_.modified as modified4_2_, news0_.title as title5_2_ from news news0_ order by news0_.created desc
2023-02-05 19:38:01 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        news0_.id as id1_2_,
        news0_.author_id as author_i6_2_,
        news0_.content as content2_2_,
        news0_.created as created3_2_,
        news0_.modified as modified4_2_,
        news0_.title as title5_2_ 
    from
        news news0_ 
    order by
        news0_.created desc limit ?
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.News#7]
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result set row: 1
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.News#6]
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result set row: 2
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.News#5]
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result set row: 3
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.News#4]
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result set row: 4
2023-02-05 19:38:01 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.News#3]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.News#7]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `author` : value = 1
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `comments` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`comments`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `content` : value = Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`content`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `created` : value = 2023-02-05T15:18:15.117659
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`created`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `modified` : value = 2023-02-05T15:18:15.117659
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`modified`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `tags` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`tags`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `title` : value = Test title233
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.News#7]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.News#6]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `author` : value = 1
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `comments` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`comments`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `content` : value = Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`content`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `created` : value = 2023-02-04T21:21:53.604753
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`created`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `modified` : value = 2023-02-04T21:21:53.604753
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`modified`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `tags` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`tags`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `title` : value = Test title2
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.News#6]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.News#5]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `author` : value = 3
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `comments` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`comments`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `content` : value = Christian Streich: The skinny-dipping managerial maverick shaking up the Bundesliga
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`content`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `created` : value = 2022-03-17T15:55:52.611265
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`created`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `modified` : value = 2022-03-17T15:55:52.611265
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`modified`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `tags` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`tags`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `title` : value = Christian Streich
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.News#5]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.News#4]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `author` : value = 3
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `comments` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`comments`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `content` : value = Morocco World Cup run - and the Englishman who helped plot it
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`content`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `created` : value = 2022-03-16T15:55:52.611265
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`created`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `modified` : value = 2022-03-16T15:55:52.611265
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`modified`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `tags` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`tags`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `title` : value = Morocco World Cup run
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.News#4]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.News#3]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `author` : value = 2
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `comments` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`comments`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `content` : value = Saturday transfer gossip: Mourinho, Berge, Elanga, Caicedo, Bellingham, Gusto, Martinelli
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`content`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `created` : value = 2022-03-15T15:55:52.611265
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`created`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `modified` : value = 2022-03-15T15:55:52.611265
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`modified`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `tags` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`tags`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `title` : value = Saturday transfer gossip
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.News#3]
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(1307807793<open>)]
2023-02-05 19:38:01 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 19:38:01 DEBUG org.springframework.jdbc.datasource.DataSourceUtils - Resetting read-only flag of JDBC Connection [HikariProxyConnection@2022306194 wrapping org.postgresql.jdbc.PgConnection@743d0d44]
2023-02-05 19:38:01 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 19:38:01 DEBUG org.hibernate.internal.SessionImpl - Initializing proxy: [com.epam.domain.Author#1]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        author0_.id as id1_0_0_,
        author0_.name as name2_0_0_ 
    from
        author author0_ 
    where
        author0_.id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#1]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = Jim
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#1]
2023-02-05 19:38:01 DEBUG hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader - Done entity load : com.epam.domain.Author#1
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.tags#7]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        tags0_.news_id as news_id1_3_0_,
        tags0_.tag_id as tag_id2_3_0_,
        tag1_.id as id1_4_1_,
        tag1_.name as name2_4_1_ 
    from
        news_tag tags0_ 
    inner join
        tag tag1_ 
            on tags0_.tag_id=tag1_.id 
    where
        tags0_.news_id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.tags#7]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#7]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#7]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#7]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#1]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = sport
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#1]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#8]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#8]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#9]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test8888
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#9]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.tags#7]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.tags#6]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        tags0_.news_id as news_id1_3_0_,
        tags0_.tag_id as tag_id2_3_0_,
        tag1_.id as id1_4_1_,
        tag1_.name as name2_4_1_ 
    from
        news_tag tags0_ 
    inner join
        tag tag1_ 
            on tags0_.tag_id=tag1_.id 
    where
        tags0_.news_id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.tags#6]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#6]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#6]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#6]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#7]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test23
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#7]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.tags#6]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:01 DEBUG org.hibernate.internal.SessionImpl - Initializing proxy: [com.epam.domain.Author#3]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        author0_.id as id1_0_0_,
        author0_.name as name2_0_0_ 
    from
        author author0_ 
    where
        author0_.id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#3]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = David
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#3]
2023-02-05 19:38:01 DEBUG hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader - Done entity load : com.epam.domain.Author#3
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.tags#5]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        tags0_.news_id as news_id1_3_0_,
        tags0_.tag_id as tag_id2_3_0_,
        tag1_.id as id1_4_1_,
        tag1_.name as name2_4_1_ 
    from
        news_tag tags0_ 
    inner join
        tag tag1_ 
            on tags0_.tag_id=tag1_.id 
    where
        tags0_.news_id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.tags#5]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#5]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#5]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#3]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = shop
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#3]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.tags#5]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.tags#4]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        tags0_.news_id as news_id1_3_0_,
        tags0_.tag_id as tag_id2_3_0_,
        tag1_.id as id1_4_1_,
        tag1_.name as name2_4_1_ 
    from
        news_tag tags0_ 
    inner join
        tag tag1_ 
            on tags0_.tag_id=tag1_.id 
    where
        tags0_.news_id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.tags#4]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#4]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#4]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#4]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = culture
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#4]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.tags#4]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:01 DEBUG org.hibernate.internal.SessionImpl - Initializing proxy: [com.epam.domain.Author#2]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        author0_.id as id1_0_0_,
        author0_.name as name2_0_0_ 
    from
        author author0_ 
    where
        author0_.id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#2]
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = John
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:01 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#2]
2023-02-05 19:38:01 DEBUG hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader - Done entity load : com.epam.domain.Author#2
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.tags#3]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        tags0_.news_id as news_id1_3_0_,
        tags0_.tag_id as tag_id2_3_0_,
        tag1_.id as id1_4_1_,
        tag1_.name as name2_4_1_ 
    from
        news_tag tags0_ 
    inner join
        tag tag1_ 
            on tags0_.tag_id=tag1_.id 
    where
        tags0_.news_id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.tags#3]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#3]
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.tags#3]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.tags#3]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.tags
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.NewsDtoMapperImpl.toNewsDtoList() with argument[s] = [[News(title=Test title233, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=Author(name=Jim), created=2023-02-05T15:18:15.117659, modified=2023-02-05T15:18:15.117659, tags=[Tag(name=sport), Tag(name=test), Tag(name=test8888)]), News(title=Test title2, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=Author(name=Jim), created=2023-02-04T21:21:53.604753, modified=2023-02-04T21:21:53.604753, tags=[Tag(name=sport), Tag(name=test23), Tag(name=test)]), News(title=Christian Streich, content=Christian Streich: The skinny-dipping managerial maverick shaking up the Bundesliga, author=Author(name=David), created=2022-03-17T15:55:52.611265, modified=2022-03-17T15:55:52.611265, tags=[Tag(name=sport), Tag(name=shop)]), News(title=Morocco World Cup run, content=Morocco World Cup run - and the Englishman who helped plot it, author=Author(name=David), created=2022-03-16T15:55:52.611265, modified=2022-03-16T15:55:52.611265, tags=[Tag(name=sport), Tag(name=culture)]), News(title=Saturday transfer gossip, content=Saturday transfer gossip: Mourinho, Berge, Elanga, Caicedo, Bellingham, Gusto, Martinelli, author=Author(name=John), created=2022-03-15T15:55:52.611265, modified=2022-03-15T15:55:52.611265, tags=[Tag(name=sport), Tag(name=shop)])]]
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with argument[s] = [Author(name=Jim)]
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with result = AuthorDto(id=1, name=Jim)
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=test), Tag(name=test8888)]]
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=9, name=test8888)]
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.comments#7]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        comments0_.news_id as news_id5_1_0_,
        comments0_.id as id1_1_0_,
        comments0_.id as id1_1_1_,
        comments0_.content as content2_1_1_,
        comments0_.created as created3_1_1_,
        comments0_.modified as modified4_1_1_,
        comments0_.news_id as news_id5_1_1_ 
    from
        comment comments0_ 
    where
        comments0_.news_id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.comments#7]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.comments
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.comments#7]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.comments
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with argument[s] = [[]]
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with result = []
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with argument[s] = [Author(name=Jim)]
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with result = AuthorDto(id=1, name=Jim)
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=test23), Tag(name=test)]]
2023-02-05 19:38:01 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=7, name=test23), TagDto(id=8, name=test)]
2023-02-05 19:38:01 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.comments#6]
2023-02-05 19:38:01 DEBUG org.hibernate.SQL - 
    select
        comments0_.news_id as news_id5_1_0_,
        comments0_.id as id1_1_0_,
        comments0_.id as id1_1_1_,
        comments0_.content as content2_1_1_,
        comments0_.created as created3_1_1_,
        comments0_.modified as modified4_1_1_,
        comments0_.news_id as news_id5_1_1_ 
    from
        comment comments0_ 
    where
        comments0_.news_id=?
2023-02-05 19:38:01 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.comments#6]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.comments
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.comments#6]
2023-02-05 19:38:01 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.comments
2023-02-05 19:38:02 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with argument[s] = [[]]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with result = []
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with argument[s] = [Author(name=David)]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with result = AuthorDto(id=3, name=David)
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=shop)]]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=3, name=shop)]
2023-02-05 19:38:02 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.comments#5]
2023-02-05 19:38:02 DEBUG org.hibernate.SQL - 
    select
        comments0_.news_id as news_id5_1_0_,
        comments0_.id as id1_1_0_,
        comments0_.id as id1_1_1_,
        comments0_.content as content2_1_1_,
        comments0_.created as created3_1_1_,
        comments0_.modified as modified4_1_1_,
        comments0_.news_id as news_id5_1_1_ 
    from
        comment comments0_ 
    where
        comments0_.news_id=?
2023-02-05 19:38:02 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.comments#5]
2023-02-05 19:38:02 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.comments#5]
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Comment#7]
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `content` : value = Super!!!
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`content`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `created` : value = 2022-04-17T15:55:52.611265
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`created`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `modified` : value = 2022-04-19T15:55:52.611265
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`modified`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = 5
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Comment#7]
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.comments
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.comments#5]
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.comments
2023-02-05 19:38:02 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with argument[s] = [[Comment(content=Super!!!, news=News(title=Christian Streich, content=Christian Streich: The skinny-dipping managerial maverick shaking up the Bundesliga, author=Author(name=David), created=2022-03-17T15:55:52.611265, modified=2022-03-17T15:55:52.611265, tags=[Tag(name=sport), Tag(name=shop)]), created=2022-04-17T15:55:52.611265, modified=2022-04-19T15:55:52.611265)]]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with result = [CommentDto(id=7, content=Super!!!, created=2022-04-17T15:55:52.611265, modified=2022-04-19T15:55:52.611265)]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with argument[s] = [Author(name=David)]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with result = AuthorDto(id=3, name=David)
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=culture)]]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=4, name=culture)]
2023-02-05 19:38:02 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.comments#4]
2023-02-05 19:38:02 DEBUG org.hibernate.SQL - 
    select
        comments0_.news_id as news_id5_1_0_,
        comments0_.id as id1_1_0_,
        comments0_.id as id1_1_1_,
        comments0_.content as content2_1_1_,
        comments0_.created as created3_1_1_,
        comments0_.modified as modified4_1_1_,
        comments0_.news_id as news_id5_1_1_ 
    from
        comment comments0_ 
    where
        comments0_.news_id=?
2023-02-05 19:38:02 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.comments#4]
2023-02-05 19:38:02 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.comments#4]
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Comment#6]
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `content` : value = Bad day
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`content`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `created` : value = 2022-04-17T15:55:52.611265
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`created`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `modified` : value = 2022-04-18T15:55:52.611265
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`modified`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = 4
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Comment#6]
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.comments
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.comments#4]
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.comments
2023-02-05 19:38:02 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with argument[s] = [[Comment(content=Bad day, news=News(title=Morocco World Cup run, content=Morocco World Cup run - and the Englishman who helped plot it, author=Author(name=David), created=2022-03-16T15:55:52.611265, modified=2022-03-16T15:55:52.611265, tags=[Tag(name=sport), Tag(name=culture)]), created=2022-04-17T15:55:52.611265, modified=2022-04-18T15:55:52.611265)]]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with result = [CommentDto(id=6, content=Bad day, created=2022-04-17T15:55:52.611265, modified=2022-04-18T15:55:52.611265)]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with argument[s] = [Author(name=John)]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with result = AuthorDto(id=2, name=John)
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=shop)]]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=3, name=shop)]
2023-02-05 19:38:02 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Loading collection: [com.epam.domain.News.comments#3]
2023-02-05 19:38:02 DEBUG org.hibernate.SQL - 
    select
        comments0_.news_id as news_id5_1_0_,
        comments0_.id as id1_1_0_,
        comments0_.id as id1_1_1_,
        comments0_.content as content2_1_1_,
        comments0_.created as created3_1_1_,
        comments0_.modified as modified4_1_1_,
        comments0_.news_id as news_id5_1_1_ 
    from
        comment comments0_ 
    where
        comments0_.news_id=?
2023-02-05 19:38:02 DEBUG plan.exec.process.internal.ResultSetProcessorImpl - Preparing collection initializer : [com.epam.domain.News.comments#3]
2023-02-05 19:38:02 DEBUG plan.exec.process.internal.CollectionReferenceInitializerImpl - Found row of collection: [com.epam.domain.News.comments#3]
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Comment#5]
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `content` : value = Good day
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`content`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `created` : value = 2022-04-17T15:55:52.611265
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`created`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `modified` : value = 2022-04-17T15:55:52.611265
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`modified`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = 3
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:02 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Comment#5]
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections were found in result set for role: com.epam.domain.News.comments
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - Collection fully initialized: [com.epam.domain.News.comments#3]
2023-02-05 19:38:02 DEBUG hibernate.engine.loading.internal.CollectionLoadContext - 1 collections initialized for role: com.epam.domain.News.comments
2023-02-05 19:38:02 DEBUG hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer - Done loading collection
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with argument[s] = [[Comment(content=Good day, news=News(title=Saturday transfer gossip, content=Saturday transfer gossip: Mourinho, Berge, Elanga, Caicedo, Bellingham, Gusto, Martinelli, author=Author(name=John), created=2022-03-15T15:55:52.611265, modified=2022-03-15T15:55:52.611265, tags=[Tag(name=sport), Tag(name=shop)]), created=2022-04-17T15:55:52.611265, modified=2022-04-17T15:55:52.611265)]]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with result = [CommentDto(id=5, content=Good day, created=2022-04-17T15:55:52.611265, modified=2022-04-17T15:55:52.611265)]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.NewsDtoMapperImpl.toNewsDtoList() with result = [NewsDto(id=7, title=Test title233, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T15:18:15.117659, modified=2023-02-05T15:18:15.117659, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=9, name=test8888)], comments=[]), NewsDto(id=6, title=Test title2, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-04T21:21:53.604753, modified=2023-02-04T21:21:53.604753, tags=[TagDto(id=1, name=sport), TagDto(id=7, name=test23), TagDto(id=8, name=test)], comments=[]), NewsDto(id=5, title=Christian Streich, content=Christian Streich: The skinny-dipping managerial maverick shaking up the Bundesliga, author=AuthorDto(id=3, name=David), created=2022-03-17T15:55:52.611265, modified=2022-03-17T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=3, name=shop)], comments=[CommentDto(id=7, content=Super!!!, created=2022-04-17T15:55:52.611265, modified=2022-04-19T15:55:52.611265)]), NewsDto(id=4, title=Morocco World Cup run, content=Morocco World Cup run - and the Englishman who helped plot it, author=AuthorDto(id=3, name=David), created=2022-03-16T15:55:52.611265, modified=2022-03-16T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=4, name=culture)], comments=[CommentDto(id=6, content=Bad day, created=2022-04-17T15:55:52.611265, modified=2022-04-18T15:55:52.611265)]), NewsDto(id=3, title=Saturday transfer gossip, content=Saturday transfer gossip: Mourinho, Berge, Elanga, Caicedo, Bellingham, Gusto, Martinelli, author=AuthorDto(id=2, name=John), created=2022-03-15T15:55:52.611265, modified=2022-03-15T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=3, name=shop)], comments=[CommentDto(id=5, content=Good day, created=2022-04-17T15:55:52.611265, modified=2022-04-17T15:55:52.611265)])]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.NewsServiceImpl.getAllNews() with result = [NewsDto(id=7, title=Test title233, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T15:18:15.117659, modified=2023-02-05T15:18:15.117659, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=9, name=test8888)], comments=[]), NewsDto(id=6, title=Test title2, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-04T21:21:53.604753, modified=2023-02-04T21:21:53.604753, tags=[TagDto(id=1, name=sport), TagDto(id=7, name=test23), TagDto(id=8, name=test)], comments=[]), NewsDto(id=5, title=Christian Streich, content=Christian Streich: The skinny-dipping managerial maverick shaking up the Bundesliga, author=AuthorDto(id=3, name=David), created=2022-03-17T15:55:52.611265, modified=2022-03-17T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=3, name=shop)], comments=[CommentDto(id=7, content=Super!!!, created=2022-04-17T15:55:52.611265, modified=2022-04-19T15:55:52.611265)]), NewsDto(id=4, title=Morocco World Cup run, content=Morocco World Cup run - and the Englishman who helped plot it, author=AuthorDto(id=3, name=David), created=2022-03-16T15:55:52.611265, modified=2022-03-16T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=4, name=culture)], comments=[CommentDto(id=6, content=Bad day, created=2022-04-17T15:55:52.611265, modified=2022-04-18T15:55:52.611265)]), NewsDto(id=3, title=Saturday transfer gossip, content=Saturday transfer gossip: Mourinho, Berge, Elanga, Caicedo, Bellingham, Gusto, Martinelli, author=AuthorDto(id=2, name=John), created=2022-03-15T15:55:52.611265, modified=2022-03-15T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=3, name=shop)], comments=[CommentDto(id=5, content=Good day, created=2022-04-17T15:55:52.611265, modified=2022-04-17T15:55:52.611265)])]
2023-02-05 19:38:02 DEBUG com.epam.aspect.Logging - Exit: com.epam.controller.NewsControllerImpl.getAllNews() with result = <200 OK OK,CollectionModel { content: [NewsDto(id=7, title=Test title233, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T15:18:15.117659, modified=2023-02-05T15:18:15.117659, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=9, name=test8888)], comments=[]), NewsDto(id=6, title=Test title2, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-04T21:21:53.604753, modified=2023-02-04T21:21:53.604753, tags=[TagDto(id=1, name=sport), TagDto(id=7, name=test23), TagDto(id=8, name=test)], comments=[]), NewsDto(id=5, title=Christian Streich, content=Christian Streich: The skinny-dipping managerial maverick shaking up the Bundesliga, author=AuthorDto(id=3, name=David), created=2022-03-17T15:55:52.611265, modified=2022-03-17T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=3, name=shop)], comments=[CommentDto(id=7, content=Super!!!, created=2022-04-17T15:55:52.611265, modified=2022-04-19T15:55:52.611265)]), NewsDto(id=4, title=Morocco World Cup run, content=Morocco World Cup run - and the Englishman who helped plot it, author=AuthorDto(id=3, name=David), created=2022-03-16T15:55:52.611265, modified=2022-03-16T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=4, name=culture)], comments=[CommentDto(id=6, content=Bad day, created=2022-04-17T15:55:52.611265, modified=2022-04-18T15:55:52.611265)]), NewsDto(id=3, title=Saturday transfer gossip, content=Saturday transfer gossip: Mourinho, Berge, Elanga, Caicedo, Bellingham, Gusto, Martinelli, author=AuthorDto(id=2, name=John), created=2022-03-15T15:55:52.611265, modified=2022-03-15T15:55:52.611265, tags=[TagDto(id=1, name=sport), TagDto(id=3, name=shop)], comments=[CommentDto(id=5, content=Good day, created=2022-04-17T15:55:52.611265, modified=2022-04-17T15:55:52.611265)])], fallbackType: null, links: [<http://localhost:8080/api/v1/news?pageNumber=1&pageSize=10&sortType=DESC&sortField=created>;rel="self", <http://localhost:8080/api/v1/news?pageNumber=2&pageSize=10&sortType=DESC&sortField=created>;rel="nextPage"] },[]>
2023-02-05 19:38:02 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json]
2023-02-05 19:38:02 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Writing [CollectionModel { content: [NewsDto(id=7, title=Test title233, content=Australian Open 2023: Aryna S (truncated)...]
2023-02-05 19:38:02 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:38:02 DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 200 OK
2023-02-05 19:38:21 DEBUG org.springframework.web.servlet.DispatcherServlet - POST "/api/v1/news/authors/1", parameters={}
2023-02-05 19:38:21 DEBUG servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped to com.epam.controller.NewsControllerImpl#createNews(NewsToCreate, Long)
2023-02-05 19:38:21 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:38:21 DEBUG servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [NewsToCreate(title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakin (truncated)...]
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Enter: com.epam.controller.NewsControllerImpl.createNews() with argument[s] = [NewsToCreate(title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, tags=[TagToCreate(name=sport), TagToCreate(name=sport), TagToCreate(name=test), TagToCreate(name=test000), TagToCreate(name=test)]), 1]
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(906989636<open>)] for JPA transaction
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [com.epam.service.NewsServiceImpl.createNews]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
2023-02-05 19:38:21 DEBUG hibernate.engine.transaction.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-02-05 19:38:21 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@1d707ee6]
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.NewsServiceImpl.createNews() with argument[s] = [NewsToCreate(title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, tags=[TagToCreate(name=sport), TagToCreate(name=sport), TagToCreate(name=test), TagToCreate(name=test000), TagToCreate(name=test)]), 1]
2023-02-05 19:38:21 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from news as generatedAlias0 where upper(generatedAlias0.title)=upper(:param0)
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select generatedAlias0 from com.epam.domain.News as generatedAlias0 where upper(generatedAlias0.title)=upper(:param0)
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  \-[IDENT] Node: 'epam'
    |  |     |  |  \-[IDENT] Node: 'domain'
    |  |     |  \-[IDENT] Node: 'News'
    |  |     \-[ALIAS] Node: 'generatedAlias0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'upper'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 'generatedAlias0'
          |        \-[IDENT] Node: 'title'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'upper'
             \-[EXPR_LIST] Node: 'exprList'
                \-[COLON] Node: ':'
                   \-[IDENT] Node: 'param0'

2023-02-05 19:38:21 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.News (generatedAlias0) -> news0_
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> news0_.id
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> news0_.id
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.DotNode - getDataType() : title -> org.hibernate.type.StringType@3866c96e
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0.title -> news0_.title
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} news0_.id ) ( FromClause{level=1} news news0_ ) ( where ( = ( ( upper ( exprList ( news0_.title news0_.id title ) ) ) ( ( upper ( exprList ? ) ) ) ) )
2023-02-05 19:38:21 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity News): [news]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(com.epam.domain.News)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-MethodNode
          |  +-IdentNode
          |  | persister: null
          |  | originalText: upper
          |  \-SqlNode
          |     \-DotNode
          |       persister: SingleTableEntityPersister(com.epam.domain.News)
          |       path: generatedAlias0.title
          |        +-IdentNode
          |        | persister: SingleTableEntityPersister(com.epam.domain.News)
          |        | originalText: generatedAlias0
          |        \-IdentNode
          |          persister: null
          |          originalText: title
          \-MethodNode
             +-IdentNode
             | persister: null
             | originalText: upper
             \-SqlNode
                \-ParameterNode

2023-02-05 19:38:21 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [news news0_]
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (news)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'news0_.id as id1_2_' {alias=generatedAlias0, className=com.epam.domain.News, tableAlias=news0_}
    |  \-[SQL_TOKEN] SqlFragment: 'news0_.author_id as author_i6_2_, news0_.content as content2_2_, news0_.created as created3_2_, news0_.modified as modified4_2_, news0_.title as title5_2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[news0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'news news0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=news,tableAlias=news0_,origin=null,columns={,className=com.epam.domain.News}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[METHOD_CALL] MethodNode: '('
          |  +-[METHOD_NAME] IdentNode: 'upper' {originalText=upper}
          |  \-[EXPR_LIST] SqlNode: 'exprList'
          |     \-[DOT] DotNode: 'news0_.title' {propertyName=title,dereferenceType=PRIMITIVE,getPropertyPath=title,path=generatedAlias0.title,tableAlias=news0_,className=com.epam.domain.News,classAlias=generatedAlias0}
          |        +-[ALIAS_REF] IdentNode: 'news0_.id' {alias=generatedAlias0, className=com.epam.domain.News, tableAlias=news0_}
          |        \-[IDENT] IdentNode: 'title' {originalText=title}
          \-[METHOD_CALL] MethodNode: '('
             +-[METHOD_NAME] IdentNode: 'upper' {originalText=upper}
             \-[EXPR_LIST] SqlNode: 'exprList'
                \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=null}

2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select generatedAlias0 from com.epam.domain.News as generatedAlias0 where upper(generatedAlias0.title)=upper(:param0)
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select news0_.id as id1_2_, news0_.author_id as author_i6_2_, news0_.content as content2_2_, news0_.created as created3_2_, news0_.modified as modified4_2_, news0_.title as title5_2_ from news news0_ where upper(news0_.title)=upper(?)
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    select
        news0_.id as id1_2_,
        news0_.author_id as author_i6_2_,
        news0_.content as content2_2_,
        news0_.created as created3_2_,
        news0_.modified as modified4_2_,
        news0_.title as title5_2_ 
    from
        news news0_ 
    where
        upper(news0_.title)=upper(?)
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.AuthorServiceImpl.getAuthorById() with argument[s] = [1]
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(906989636<open>)] for JPA transaction
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Participating in existing transaction
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    select
        author0_.id as id1_0_0_,
        author0_.name as name2_0_0_ 
    from
        author author0_ 
    where
        author0_.id=?
2023-02-05 19:38:21 DEBUG plan.exec.process.internal.EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#1]
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = Jim
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#1]
2023-02-05 19:38:21 DEBUG hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader - Done entity load : com.epam.domain.Author#1
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.AuthorServiceImpl.getAuthorById() with result = Author(name=Jim)
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.TagServiceImpl.updateTags() with argument[s] = [[TagToCreate(name=sport), TagToCreate(name=sport), TagToCreate(name=test), TagToCreate(name=test000), TagToCreate(name=test)]]
2023-02-05 19:38:21 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0 where upper(generatedAlias0.name)=upper(:param0)
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: select generatedAlias0 from com.epam.domain.Tag as generatedAlias0 where upper(generatedAlias0.name)=upper(:param0)
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  \-[IDENT] Node: 'epam'
    |  |     |  |  \-[IDENT] Node: 'domain'
    |  |     |  \-[IDENT] Node: 'Tag'
    |  |     \-[ALIAS] Node: 'generatedAlias0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[METHOD_CALL] Node: '('
          |  +-[IDENT] Node: 'upper'
          |  \-[EXPR_LIST] Node: 'exprList'
          |     \-[DOT] Node: '.'
          |        +-[IDENT] Node: 'generatedAlias0'
          |        \-[IDENT] Node: 'name'
          \-[METHOD_CALL] Node: '('
             +-[IDENT] Node: 'upper'
             \-[EXPR_LIST] Node: 'exprList'
                \-[COLON] Node: ':'
                   \-[IDENT] Node: 'param0'

2023-02-05 19:38:21 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.FromElement - FromClause{level=1} : com.epam.domain.Tag (generatedAlias0) -> tag0_
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> tag0_.id
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0 -> tag0_.id
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.DotNode - getDataType() : name -> org.hibernate.type.StringType@3866c96e
2023-02-05 19:38:21 DEBUG hql.internal.ast.tree.FromReferenceNode - Resolved : generatedAlias0.name -> tag0_.name
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} tag0_.id ) ( FromClause{level=1} tag tag0_ ) ( where ( = ( ( upper ( exprList ( tag0_.name tag0_.id name ) ) ) ( ( upper ( exprList ? ) ) ) ) )
2023-02-05 19:38:21 DEBUG hql.internal.ast.util.JoinProcessor - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Tag): [tag]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(com.epam.domain.Tag)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-MethodNode
          |  +-IdentNode
          |  | persister: null
          |  | originalText: upper
          |  \-SqlNode
          |     \-DotNode
          |       persister: SingleTableEntityPersister(com.epam.domain.Tag)
          |       path: generatedAlias0.name
          |        +-IdentNode
          |        | persister: SingleTableEntityPersister(com.epam.domain.Tag)
          |        | originalText: generatedAlias0
          |        \-IdentNode
          |          persister: null
          |          originalText: name
          \-MethodNode
             +-IdentNode
             | persister: null
             | originalText: upper
             \-SqlNode
                \-ParameterNode

2023-02-05 19:38:21 DEBUG hql.internal.ast.util.JoinProcessor - Using FROM fragment [tag tag0_]
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (tag)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'tag0_.id as id1_4_' {alias=generatedAlias0, className=com.epam.domain.Tag, tableAlias=tag0_}
    |  \-[SQL_TOKEN] SqlFragment: 'tag0_.name as name2_4_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[tag0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'tag tag0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=tag,tableAlias=tag0_,origin=null,columns={,className=com.epam.domain.Tag}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[METHOD_CALL] MethodNode: '('
          |  +-[METHOD_NAME] IdentNode: 'upper' {originalText=upper}
          |  \-[EXPR_LIST] SqlNode: 'exprList'
          |     \-[DOT] DotNode: 'tag0_.name' {propertyName=name,dereferenceType=PRIMITIVE,getPropertyPath=name,path=generatedAlias0.name,tableAlias=tag0_,className=com.epam.domain.Tag,classAlias=generatedAlias0}
          |        +-[ALIAS_REF] IdentNode: 'tag0_.id' {alias=generatedAlias0, className=com.epam.domain.Tag, tableAlias=tag0_}
          |        \-[IDENT] IdentNode: 'name' {originalText=name}
          \-[METHOD_CALL] MethodNode: '('
             +-[METHOD_NAME] IdentNode: 'upper' {originalText=upper}
             \-[EXPR_LIST] SqlNode: 'exprList'
                \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=null}

2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: select generatedAlias0 from com.epam.domain.Tag as generatedAlias0 where upper(generatedAlias0.name)=upper(:param0)
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select tag0_.id as id1_4_, tag0_.name as name2_4_ from tag tag0_ where upper(tag0_.name)=upper(?)
2023-02-05 19:38:21 DEBUG hibernate.hql.internal.ast.ErrorTracker - throwQueryException() : no errors
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Author.news#1], was: [com.epam.domain.Author.news#1] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - Listing entities:
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Author{news=<uninitialized>, name=Jim, id=1}
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ 
    where
        upper(tag0_.name)=upper(?)
2023-02-05 19:38:21 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:38:21 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#1]
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#1]
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = sport
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#1]
2023-02-05 19:38:21 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0 where upper(generatedAlias0.name)=upper(:param0)
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Author.news#1], was: [com.epam.domain.Author.news#1] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#1], was: [com.epam.domain.Tag.news#1] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - Listing entities:
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Author{news=<uninitialized>, name=Jim, id=1}
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=sport, id=1}
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ 
    where
        upper(tag0_.name)=upper(?)
2023-02-05 19:38:21 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:38:21 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#8]
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#8]
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#8]
2023-02-05 19:38:21 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0 where upper(generatedAlias0.name)=upper(:param0)
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Author.news#1], was: [com.epam.domain.Author.news#1] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#1], was: [com.epam.domain.Tag.news#1] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#8], was: [com.epam.domain.Tag.news#8] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - Listing entities:
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=test, id=8}
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Author{news=<uninitialized>, name=Jim, id=1}
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=sport, id=1}
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ 
    where
        upper(tag0_.name)=upper(?)
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(906989636<open>)] for JPA transaction
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Participating in existing transaction
2023-02-05 19:38:21 DEBUG org.hibernate.engine.spi.ActionQueue - Executing identity-insert immediately
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    insert 
    into
        tag
        (name) 
    values
        (?)
2023-02-05 19:38:21 DEBUG org.hibernate.id.IdentifierGeneratorHelper - Natively generated identity: 11
2023-02-05 19:38:21 DEBUG hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl - HHH000387: ResultSet's statement was not registered
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.TagServiceImpl.updateTags() with result = [Tag(name=sport), Tag(name=test), Tag(name=test000)]
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(906989636<open>)] for JPA transaction
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Participating in existing transaction
2023-02-05 19:38:21 DEBUG org.hibernate.engine.spi.ActionQueue - Executing identity-insert immediately
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    insert 
    into
        news
        (author_id, content, created, modified, title) 
    values
        (?, ?, ?, ?, ?)
2023-02-05 19:38:21 DEBUG org.hibernate.id.IdentifierGeneratorHelper - Natively generated identity: 8
2023-02-05 19:38:21 DEBUG hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl - HHH000387: ResultSet's statement was not registered
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.NewsDtoMapperImpl.toNewsDto() with argument[s] = [News(title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=Author(name=Jim), created=2023-02-05T19:38:21.640440500, modified=2023-02-05T19:38:21.640440500, tags=[Tag(name=sport), Tag(name=test), Tag(name=test000)])]
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with argument[s] = [Author(name=Jim)]
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with result = AuthorDto(id=1, name=Jim)
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=test), Tag(name=test000)]]
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=11, name=test000)]
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with argument[s] = [[]]
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with result = []
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.NewsDtoMapperImpl.toNewsDto() with result = NewsDto(id=8, title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T19:38:21.640440500, modified=2023-02-05T19:38:21.640440500, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=11, name=test000)], comments=[])
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.NewsServiceImpl.createNews() with result = NewsDto(id=8, title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T19:38:21.640440500, modified=2023-02-05T19:38:21.640440500, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=11, name=test000)], comments=[])
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(906989636<open>)]
2023-02-05 19:38:21 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Author.news#1], was: [com.epam.domain.Author.news#1] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#1], was: [com.epam.domain.Tag.news#1] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#8], was: [com.epam.domain.Tag.news#8] (uninitialized)
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.News.comments#8], was: [<unreferenced>] (initialized)
2023-02-05 19:38:21 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.News.tags#8], was: [<unreferenced>] (initialized)
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
2023-02-05 19:38:21 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 2 (re)creations, 0 updates, 0 removals to 5 collections
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - Listing entities:
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=test, id=8}
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Author{news=<uninitialized>, name=Jim, id=1}
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=sport, id=1}
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=null, name=test000, id=11}
2023-02-05 19:38:21 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.News{comments=[], author=com.epam.domain.Author#1, created=2023-02-05T19:38:21.640440500, modified=2023-02-05T19:38:21.640440500, id=8, title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, tags=[com.epam.domain.Tag#1, com.epam.domain.Tag#8, com.epam.domain.Tag#11]}
2023-02-05 19:38:21 DEBUG org.hibernate.persister.collection.AbstractCollectionPersister - Inserting collection: [com.epam.domain.News.tags#8]
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    insert 
    into
        news_tag
        (news_id, tag_id) 
    values
        (?, ?)
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    insert 
    into
        news_tag
        (news_id, tag_id) 
    values
        (?, ?)
2023-02-05 19:38:21 DEBUG org.hibernate.SQL - 
    insert 
    into
        news_tag
        (news_id, tag_id) 
    values
        (?, ?)
2023-02-05 19:38:21 DEBUG org.hibernate.persister.collection.AbstractCollectionPersister - Done inserting collection: 3 rows inserted
2023-02-05 19:38:21 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 19:38:21 DEBUG com.epam.aspect.Logging - Exit: com.epam.controller.NewsControllerImpl.createNews() with result = <201 CREATED Created,NewsDto(id=8, title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T19:38:21.640440500, modified=2023-02-05T19:38:21.640440500, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=11, name=test000)], comments=[]),[]>
2023-02-05 19:38:21 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json]
2023-02-05 19:38:21 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Writing [NewsDto(id=8, title=Test title2330, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybaki (truncated)...]
2023-02-05 19:38:21 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:38:21 DEBUG hibernate.engine.jdbc.internal.JdbcCoordinatorImpl - HHH000420: Closing un-released batch
2023-02-05 19:38:21 DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 201 CREATED
2023-02-05 19:38:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:38:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:38:27 DEBUG org.springframework.web.servlet.DispatcherServlet - POST "/api/v1/news/authors/1", parameters={}
2023-02-05 19:38:27 DEBUG servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped to com.epam.controller.NewsControllerImpl#createNews(NewsToCreate, Long)
2023-02-05 19:38:27 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:38:27 DEBUG servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [NewsToCreate(title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybaki (truncated)...]
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Enter: com.epam.controller.NewsControllerImpl.createNews() with argument[s] = [NewsToCreate(title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, tags=[TagToCreate(name=sport), TagToCreate(name=sport), TagToCreate(name=test), TagToCreate(name=test000), TagToCreate(name=test)]), 1]
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(1435987997<open>)] for JPA transaction
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [com.epam.service.NewsServiceImpl.createNews]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
2023-02-05 19:38:27 DEBUG hibernate.engine.transaction.internal.TransactionImpl - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-02-05 19:38:27 DEBUG hibernate.engine.transaction.internal.TransactionImpl - begin
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@5bc10baf]
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.NewsServiceImpl.createNews() with argument[s] = [NewsToCreate(title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, tags=[TagToCreate(name=sport), TagToCreate(name=sport), TagToCreate(name=test), TagToCreate(name=test000), TagToCreate(name=test)]), 1]
2023-02-05 19:38:27 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from news as generatedAlias0 where upper(generatedAlias0.title)=upper(:param0)
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    select
        news0_.id as id1_2_,
        news0_.author_id as author_i6_2_,
        news0_.content as content2_2_,
        news0_.created as created3_2_,
        news0_.modified as modified4_2_,
        news0_.title as title5_2_ 
    from
        news news0_ 
    where
        upper(news0_.title)=upper(?)
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.AuthorServiceImpl.getAuthorById() with argument[s] = [1]
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(1435987997<open>)] for JPA transaction
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Participating in existing transaction
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    select
        author0_.id as id1_0_0_,
        author0_.name as name2_0_0_ 
    from
        author author0_ 
    where
        author0_.id=?
2023-02-05 19:38:27 DEBUG plan.exec.process.internal.EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Author#1]
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = Jim
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Author#1]
2023-02-05 19:38:27 DEBUG hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader - Done entity load : com.epam.domain.Author#1
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.AuthorServiceImpl.getAuthorById() with result = Author(name=Jim)
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.TagServiceImpl.updateTags() with argument[s] = [[TagToCreate(name=sport), TagToCreate(name=sport), TagToCreate(name=test), TagToCreate(name=test000), TagToCreate(name=test)]]
2023-02-05 19:38:27 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0 where upper(generatedAlias0.name)=upper(:param0)
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Author.news#1], was: [com.epam.domain.Author.news#1] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 (re)creations, 0 updates, 0 removals to 1 collections
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - Listing entities:
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Author{news=<uninitialized>, name=Jim, id=1}
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ 
    where
        upper(tag0_.name)=upper(?)
2023-02-05 19:38:27 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:38:27 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#1]
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#1]
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = sport
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#1]
2023-02-05 19:38:27 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0 where upper(generatedAlias0.name)=upper(:param0)
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Author.news#1], was: [com.epam.domain.Author.news#1] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#1], was: [com.epam.domain.Tag.news#1] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 (re)creations, 0 updates, 0 removals to 2 collections
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - Listing entities:
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Author{news=<uninitialized>, name=Jim, id=1}
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=sport, id=1}
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ 
    where
        upper(tag0_.name)=upper(?)
2023-02-05 19:38:27 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:38:27 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#8]
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#8]
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#8]
2023-02-05 19:38:27 DEBUG hibernate.query.criteria.internal.CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from tag as generatedAlias0 where upper(generatedAlias0.name)=upper(:param0)
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Author.news#1], was: [com.epam.domain.Author.news#1] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#1], was: [com.epam.domain.Tag.news#1] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#8], was: [com.epam.domain.Tag.news#8] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 (re)creations, 0 updates, 0 removals to 3 collections
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - Listing entities:
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=test, id=8}
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Author{news=<uninitialized>, name=Jim, id=1}
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=sport, id=1}
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    select
        tag0_.id as id1_4_,
        tag0_.name as name2_4_ 
    from
        tag tag0_ 
    where
        upper(tag0_.name)=upper(?)
2023-02-05 19:38:27 DEBUG org.hibernate.loader.Loader - Result set row: 0
2023-02-05 19:38:27 DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.epam.domain.Tag#11]
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Resolving attributes for [com.epam.domain.Tag#11]
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `name` : value = test000
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Processing attribute `news` : value = NOT NULL COLLECTION
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Attribute (`news`)  - enhanced for lazy-loading? - false
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [com.epam.domain.Tag#11]
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.TagServiceImpl.updateTags() with result = [Tag(name=sport), Tag(name=test), Tag(name=test000)]
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(1435987997<open>)] for JPA transaction
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Participating in existing transaction
2023-02-05 19:38:27 DEBUG org.hibernate.engine.spi.ActionQueue - Executing identity-insert immediately
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    insert 
    into
        news
        (author_id, content, created, modified, title) 
    values
        (?, ?, ?, ?, ?)
2023-02-05 19:38:27 DEBUG org.hibernate.id.IdentifierGeneratorHelper - Natively generated identity: 9
2023-02-05 19:38:27 DEBUG hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl - HHH000387: ResultSet's statement was not registered
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.NewsDtoMapperImpl.toNewsDto() with argument[s] = [News(title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=Author(name=Jim), created=2023-02-05T19:38:27.167241700, modified=2023-02-05T19:38:27.167241700, tags=[Tag(name=sport), Tag(name=test), Tag(name=test000)])]
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with argument[s] = [Author(name=Jim)]
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.AuthorDtoMapperImpl.toAuthorDto() with result = AuthorDto(id=1, name=Jim)
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with argument[s] = [[Tag(name=sport), Tag(name=test), Tag(name=test000)]]
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.TagDtoMapperImpl.toTagDtoList() with result = [TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=11, name=test000)]
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Enter: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with argument[s] = [[]]
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.CommentDtoMapperImpl.toCommentDtoList() with result = []
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.mapper.NewsDtoMapperImpl.toNewsDto() with result = NewsDto(id=9, title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T19:38:27.167241700, modified=2023-02-05T19:38:27.167241700, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=11, name=test000)], comments=[])
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Exit: com.epam.service.NewsServiceImpl.createNews() with result = NewsDto(id=9, title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T19:38:27.167241700, modified=2023-02-05T19:38:27.167241700, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=11, name=test000)], comments=[])
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(1435987997<open>)]
2023-02-05 19:38:27 DEBUG hibernate.engine.transaction.internal.TransactionImpl - committing
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Author.news#1], was: [com.epam.domain.Author.news#1] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#1], was: [com.epam.domain.Tag.news#1] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#8], was: [com.epam.domain.Tag.news#8] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.Tag.news#11], was: [com.epam.domain.Tag.news#11] (uninitialized)
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.News.comments#9], was: [<unreferenced>] (initialized)
2023-02-05 19:38:27 DEBUG org.hibernate.engine.internal.Collections - Collection found: [com.epam.domain.News.tags#9], was: [<unreferenced>] (initialized)
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 5 objects
2023-02-05 19:38:27 DEBUG org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 2 (re)creations, 0 updates, 0 removals to 6 collections
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - Listing entities:
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=test, id=8}
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Author{news=<uninitialized>, name=Jim, id=1}
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=sport, id=1}
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.Tag{news=<uninitialized>, name=test000, id=11}
2023-02-05 19:38:27 DEBUG org.hibernate.internal.util.EntityPrinter - com.epam.domain.News{comments=[], author=com.epam.domain.Author#1, created=2023-02-05T19:38:27.167241700, modified=2023-02-05T19:38:27.167241700, id=9, title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, tags=[com.epam.domain.Tag#1, com.epam.domain.Tag#8, com.epam.domain.Tag#11]}
2023-02-05 19:38:27 DEBUG org.hibernate.persister.collection.AbstractCollectionPersister - Inserting collection: [com.epam.domain.News.tags#9]
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    insert 
    into
        news_tag
        (news_id, tag_id) 
    values
        (?, ?)
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    insert 
    into
        news_tag
        (news_id, tag_id) 
    values
        (?, ?)
2023-02-05 19:38:27 DEBUG org.hibernate.SQL - 
    insert 
    into
        news_tag
        (news_id, tag_id) 
    values
        (?, ?)
2023-02-05 19:38:27 DEBUG org.hibernate.persister.collection.AbstractCollectionPersister - Done inserting collection: 3 rows inserted
2023-02-05 19:38:27 DEBUG org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2023-02-05 19:38:27 DEBUG com.epam.aspect.Logging - Exit: com.epam.controller.NewsControllerImpl.createNews() with result = <201 CREATED Created,NewsDto(id=9, title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybakina to win Melbourne title, author=AuthorDto(id=1, name=Jim), created=2023-02-05T19:38:27.167241700, modified=2023-02-05T19:38:27.167241700, tags=[TagDto(id=1, name=sport), TagDto(id=8, name=test), TagDto(id=11, name=test000)], comments=[]),[]>
2023-02-05 19:38:27 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json]
2023-02-05 19:38:27 DEBUG servlet.mvc.method.annotation.HttpEntityMethodProcessor - Writing [NewsDto(id=9, title=Test title23320, content=Australian Open 2023: Aryna Sabalenka beats Elena Rybak (truncated)...]
2023-02-05 19:38:27 DEBUG springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2023-02-05 19:38:27 DEBUG hibernate.engine.jdbc.internal.JdbcCoordinatorImpl - HHH000420: Closing un-released batch
2023-02-05 19:38:27 DEBUG org.springframework.web.servlet.DispatcherServlet - Completed 201 CREATED
2023-02-05 19:38:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:38:53 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
2023-02-05 19:39:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
2023-02-05 19:39:23 DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Fill pool skipped, pool is at sufficient level.
